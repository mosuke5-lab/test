<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haproxy on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/haproxy/</link>
    <description>Recent content in Haproxy on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 09 Nov 2014 17:14:00 +0900</lastBuildDate>
    <atom:link href="https://blog.mosuke.tech/categories/haproxy/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>【VPS1台でインフラ勉強】HAProxyでロードバランサーを構築</title>
      <link>https://blog.mosuke.tech/entry/2014/11/09/171436/</link>
      <pubDate>Sun, 09 Nov 2014 17:14:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2014/11/09/171436/</guid>
      <description>

&lt;p&gt;&lt;body&gt;
&lt;p&gt;前回の&lt;a href=&#34;https://blog.mosuke.tech/entry/2014/10/09/230555&#34;&gt;【VPS1台でインフラ勉強】サーバ複数台構成、Nginxでリバースプロキシ構築&lt;/a&gt;に続き、同様の環境を用いて、ロードバランサ構築を行った。&lt;br&gt;
ロードバランサの構築にはHAProxyを利用した。&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;section&#34;&gt;
    &lt;h3&gt;1. 環境&lt;/h3&gt;
    &lt;p&gt;前回同様で、さくら&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/VPS&#34;&gt;VPS&lt;/a&gt;の1GBのプラン1台のみ。&lt;br&gt;
・メモリ：１GB&lt;br&gt;
・CPU：仮想２コア&lt;br&gt;
・HDD：100GB&lt;br&gt;
・OS：CentOS7&lt;br&gt;
・サーバ仮想化：&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vagrant&#34;&gt;Vagrant&lt;/a&gt;(Utuntu13)&lt;br&gt;
・ロードバランサ：&lt;a href=&#34;http://www.haproxy.org/&#34;&gt;HAProxy - The Reliable, High Performance TCP/HTTP Load Balancer&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;
&lt;div class=&#34;section&#34;&gt;
    &lt;h3&gt;2. 構成図&lt;/h3&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20141109/20141109170337.png&#34; alt=&#34;f:id:mosuke5:20141109170337p:plain&#34; title=&#34;f:id:mosuke5:20141109170337p:plain&#34; class=&#34;hatena-fotolife&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;br&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;
&lt;div class=&#34;section&#34;&gt;
    &lt;h3&gt;3. ロードバランサの構築&lt;/h3&gt;
    &lt;p&gt;■ホストサーバ側の設定&lt;/p&gt;
```
#HAProxyインストール
$ sudo yum install haproxy&lt;/p&gt;

&lt;p&gt;#設定はすごく簡単で以下のファイルのみ。実際に
$ sudo vim /etc/haproxy/haproxy.cfg&lt;/p&gt;

&lt;p&gt;#&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;h1 id=&#34;example-configuration-for-a-possible-web-application-see-the:4125f84bdd8b5afb55876442f92cb5ec&#34;&gt;Example configuration for a possible web application.  See the&lt;/h1&gt;

&lt;h1 id=&#34;full-configuration-options-online:4125f84bdd8b5afb55876442f92cb5ec&#34;&gt;full configuration options online.&lt;/h1&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;http-haproxy-1wt-eu-download-1-4-doc-configuration-txt:4125f84bdd8b5afb55876442f92cb5ec&#34;&gt;&lt;a href=&#34;http://haproxy.1wt.eu/download/1.4/doc/configuration.txt&#34;&gt;http://haproxy.1wt.eu/download/1.4/doc/configuration.txt&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;#
#&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;p&gt;#&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;h1 id=&#34;global-settings:4125f84bdd8b5afb55876442f92cb5ec&#34;&gt;Global settings&lt;/h1&gt;

&lt;p&gt;#&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
global&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;log         127.0.0.1 local6 debug

chroot      /var/lib/haproxy
pidfile     /var/run/haproxy.pid
maxconn     4000
user        haproxy
group       haproxy
daemon

# turn on stats unix socket
stats socket /var/lib/haproxy/stats
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;h1 id=&#34;common-defaults-that-all-the-listen-and-backend-sections-will:4125f84bdd8b5afb55876442f92cb5ec&#34;&gt;common defaults that all the &amp;lsquo;listen&amp;rsquo; and &amp;lsquo;backend&amp;rsquo; sections will&lt;/h1&gt;

&lt;h1 id=&#34;use-if-not-designated-in-their-block:4125f84bdd8b5afb55876442f92cb5ec&#34;&gt;use if not designated in their block&lt;/h1&gt;

&lt;p&gt;#&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
defaults&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;##ロードバランサの動作モード。tcpにするとL4ロードバランサになる。httpにするとL7ロードバランサ。
mode                    http
log                     global
option              log-health-checks
option                  httplog
option                  dontlognull

##ヘルスチェック用のhtmlファイルをWebサーバ側に設置している。設置については後述。
option httpchk GET /health_check.html HTTP/1.0\r\nUser-agent:\ Proxy-Check

option http-server-close
option forwardfor       except 127.0.0.0/8
option                  redispatch
retries                 3
timeout http-request    10s
timeout queue           1m
timeout connect         10s
timeout client          1m
timeout server          1m
timeout http-keep-alive 10s
timeout check           10s
maxconn                 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;h1 id=&#34;main-frontend-which-proxys-to-the-backends:4125f84bdd8b5afb55876442f92cb5ec&#34;&gt;main frontend which proxys to the backends&lt;/h1&gt;

&lt;p&gt;#&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
frontend  main *:80
    default_backend             hoge&lt;/p&gt;

&lt;p&gt;#&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;h1 id=&#34;round-robin-balancing-between-the-various-backends:4125f84bdd8b5afb55876442f92cb5ec&#34;&gt;round robin balancing between the various backends&lt;/h1&gt;

&lt;p&gt;#&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
backend hoge
    balance     roundrobin
    server      web10 192.168.33.10:80 check inter 3000 fall 2 rise 2
    server      web11 192.168.33.11:80 check inter 3000 fall 2 rise 2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;L4, L7のロードバランサについては以下参照。&amp;lt;br&amp;gt;
&amp;lt;a href=&amp;quot;http://www.atmarkit.co.jp/ait/articles/0302/05/news001.html&amp;quot;&amp;gt;ロードバランサの本質（1）：パケットフローから負荷分散の基本を理解する - ＠IT&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;ロードバランサ側でhttpのリクエストを返していないことを意味づけるために&amp;lt;a class=&amp;quot;keyword&amp;quot; href=&amp;quot;http://d.hatena.ne.jp/keyword/apache&amp;quot;&amp;gt;apache&amp;lt;/a&amp;gt;, nginxを停止しておく。&amp;lt;br&amp;gt;
（特に意味は無いが念押し確認のため）&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ sudo systemctl stop nginx
$ sudo systemctl stop httpd
&lt;code&gt;
&amp;lt;p&amp;gt;HAProxyのログをsyslogに残すように設定する。&amp;lt;br&amp;gt;
ただしメインのmessageではなく、独自のファイルに書くために以下の設定。&amp;lt;/p&amp;gt;
&lt;/code&gt;
##ログの格納場所作成
$ sudo mkdir /var/log/haproxy&lt;/p&gt;

&lt;p&gt;##syslogの設定変更
$ vim /etc/rsyslog.d/haproxy.conf
   $ModLoad imudp
   $UDPServerRun 514
   $template Haproxy,&amp;ldquo;%msg%\n&amp;rdquo;
   local6.* -/var/log/haproxy/haproxy.log;Haproxy&lt;/p&gt;

&lt;p&gt;$ vim /etc/sysconfig/rsyslog
以下を追加
SYSLOGD_OPTIONS=&amp;ldquo;-r&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;haproxyの起動:4125f84bdd8b5afb55876442f92cb5ec&#34;&gt;haproxyの起動&lt;/h2&gt;

&lt;p&gt;$ sudo systemctl start haproxy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;
■Webサーバの設定&amp;lt;br&amp;gt;
仮想でのWebサーバ構築は省くが、Apache2をインストールしただけである。&amp;lt;br&amp;gt;
仮想でのサーバ構築は前回を参照。&amp;lt;br&amp;gt;
&amp;lt;a href=&amp;quot;https://blog.mosuke.tech/entry/2014/10/09/230555&amp;quot;&amp;gt;【VPS1台でインフラ勉強】サーバ複数台構成、Nginxでリバースプロキシ構築&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;var-www-html配下にヘルスチェック用のhtml設置:4125f84bdd8b5afb55876442f92cb5ec&#34;&gt;/var/www/html配下にヘルスチェック用のhtml設置&lt;/h2&gt;

&lt;p&gt;$ sudo touch health_check.html
&lt;code&gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;4. 動作試験&amp;lt;/h3&amp;gt;
    &amp;lt;p&amp;gt;ブラウザよりホストサーバへアクセス。&amp;lt;br&amp;gt;
きちんとロードバランスされていることを確認。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;HAProxy側のログは以下のとおり。&amp;lt;/p&amp;gt;
&lt;/code&gt;
$ sudo tail -f /var/log/haproxy/haproxy.conf&lt;/p&gt;

&lt;p&gt;##起動した時。L7のhealt checkが走っている
Proxy main started.
Proxy hoge started.
Health check for server hoge/web10 succeeded, reason: Layer7 check passed, code: 200, info: &amp;ldquo;OK&amp;rdquo;, check duration: 33ms, status: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; UP.
Health check for server hoge/web11 succeeded, reason: Layer7 check passed, code: 200, info: &amp;ldquo;OK&amp;rdquo;, check duration: 12ms, status: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; UP.&lt;/p&gt;

&lt;p&gt;##webサーバ側でapacheを停止
Health check for server hoge/web11 failed, reason: Layer7 wrong status, code: 404, info: &amp;ldquo;Not Found&amp;rdquo;, check duration: 13ms, status: &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; UP.
Health check for server hoge/web11 failed, reason: Layer7 wrong status, code: 404, info: &amp;ldquo;Not Found&amp;rdquo;, check duration: 8ms, status: 0/2 DOWN.&lt;/p&gt;

&lt;p&gt;##webサーバ側でhealth_check.htmlを削除した時も同様に
Health check for server hoge/web11 failed, reason: Layer7 wrong status, code: 404, info: &amp;ldquo;Not Found&amp;rdquo;, check duration: 13ms, status: &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; UP.
Health check for server hoge/web11 failed, reason: Layer7 wrong status, code: 404, info: &amp;ldquo;Not Found&amp;rdquo;, check duration: 8ms, status: 0/2 DOWN.&lt;/p&gt;

&lt;p&gt;##webサーバ側でhealth_check.htmlを復活させた時
Health check for server hoge/web11 succeeded, reason: Layer7 check passed, code: 200, info: &amp;ldquo;OK&amp;rdquo;, check duration: 8ms, status: &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; DOWN.
Health check for server hoge/web11 succeeded, reason: Layer7 check passed, code: 200, info: &amp;ldquo;OK&amp;rdquo;, check duration: 6ms, status: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; UP.
Server hoge/web11 is UP. 2 active and 0 backup servers online. 0 sessions requeued, 0 total in queue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Webサーバ側の&amp;lt;a class=&amp;quot;keyword&amp;quot; href=&amp;quot;http://d.hatena.ne.jp/keyword/Apache&amp;quot;&amp;gt;Apache&amp;lt;/a&amp;gt;ログを見てみると。&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ sudo tail -f /var/log/apache2/access.log&lt;/p&gt;

&lt;p&gt;##ロードバランサからのヘルスチェックが来ていることがわかる。
192.168.33.1 - - [09/Nov/2014:08:07:43 +0000] &amp;ldquo;GET /health_check.html HTTP/1.0&amp;rdquo; 200 276 &amp;ldquo;-&amp;rdquo; &amp;ldquo;Proxy-Check&amp;rdquo;
192.168.33.1 - - [09/Nov/2014:08:07:46 +0000] &amp;ldquo;GET /health_check.html HTTP/1.0&amp;rdquo; 200 276 &amp;ldquo;-&amp;rdquo; &amp;ldquo;Proxy-Check&amp;rdquo;
192.168.33.1 - - [09/Nov/2014:08:07:49 +0000] &amp;ldquo;GET /health_check.html HTTP/1.0&amp;rdquo; 200 276 &amp;ldquo;-&amp;rdquo; &amp;ldquo;Proxy-Check&amp;rdquo;
192.168.33.1 - - [09/Nov/2014:08:07:52 +0000] &amp;ldquo;GET /health_check.html HTTP/1.0&amp;rdquo; 200 276 &amp;ldquo;-&amp;rdquo; &amp;ldquo;Proxy-Check&amp;rdquo;&lt;/p&gt;

&lt;p&gt;##Webからのアクセスが来た場合
##SorceのIPはロードバランサにIPになっているが、UserAgentなど書き込まれていることを確認。
192.168.33.1 - - [09/Nov/2014:08:10:06 +0000] &amp;ldquo;GET / HTTP/1.1&amp;rdquo; 200 488 &amp;ldquo;-&amp;rdquo; &amp;ldquo;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10) AppleWebKit/600.1.25 (KHTML, like Gecko) Version/8.0 Safari/600.1.25&amp;rdquo;
```
&lt;/div&gt;
&lt;/body&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>