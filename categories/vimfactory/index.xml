<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vimfactory on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/vimfactory/</link>
    <description>Recent content in Vimfactory on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 03 Jul 2016 22:45:00 +0900</lastBuildDate>
    <atom:link href="https://blog.mosuke.tech/categories/vimfactory/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Vim::Factory、LTではなす</title>
      <link>https://blog.mosuke.tech/entry/2016/07/03/224531/</link>
      <pubDate>Sun, 03 Jul 2016 22:45:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/07/03/224531/</guid>
      <description>&lt;p&gt;&lt;body&gt;
&lt;p&gt;7月6日の会社のエンジニアイベントでLTするやつ、先にあげておく。&lt;br&gt;
自分の中でのネタとしては古いけど、話すのはなんだかんだ初。&lt;/p&gt;&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;edf3569025fd4894867e772d5731a20f&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;/body&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vim::Factory、LTではなす</title>
      <link>https://blog.mosuke.tech/entry/2016/07/03/224531/</link>
      <pubDate>Sun, 03 Jul 2016 22:45:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/07/03/224531/</guid>
      <description>&lt;p&gt;&lt;body&gt;
&lt;p&gt;7月6日の会社のエンジニアイベントでLTするやつ、先にあげておく。&lt;br&gt;
自分の中でのネタとしては古いけど、話すのはなんだかんだ初。&lt;/p&gt;&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;edf3569025fd4894867e772d5731a20f&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;/body&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年振り返り</title>
      <link>https://blog.mosuke.tech/entry/2015/12/28/150042/</link>
      <pubDate>Mon, 28 Dec 2015 15:00:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/12/28/150042/</guid>
      <description>&lt;p&gt;&lt;body&gt;
&lt;p&gt;去年に続き、2015年で技術分野でなにがあったか簡単に振り返りました。&lt;br&gt;
&lt;a href=&#34;https://blog.mosuke.tech/entry/2015/01/01/161826&#34;&gt;2014年を思い返して… - Goldstine研究所&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;

&lt;h1&gt;1. &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryの開発と公開&lt;/h1&gt;

&lt;p&gt;&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20151227/20151227172616.png&#34; alt=&#34;f:id:mosuke5:20151227172616p:plain:w300&#34; title=&#34;f:id:mosuke5:20151227172616p:plain:w300&#34; class=&#34;hatena-fotolife&#34; style=&#34;width:300px&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2014年の秋から@mogulla3と定期的にインフラ関連技術の勉強会をやってきていて、&lt;br&gt;
はじめはインプットの勉強会だけを主にやってきていたのですが、&lt;br&gt;
サービスを作る中でインフラ関連技術を駆使し勉強したいと思うようなっていました。&lt;br&gt;
そこで、今年は「&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/vim&#34;&gt;vim&lt;/a&gt;の設定をブラウザ上で即体感できるサービス &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factory」の開発をしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.mosuke.tech/entry/2015/07/19/135844/&#34;&gt;DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った - Goldstine研究所&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;良かった点&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;新しい技術などを組み合わせながら学習しがいのあるサービスを作れたこと&lt;/li&gt;
&lt;li&gt;サービスの実現技術を公開しそれなりの反響を得られたこと&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;悪かった点&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;内部的な&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3&#34;&gt;アーキテクチャ&lt;/a&gt;の変更ばかりに時間を取られサービスそのものの改良ができなかったこと&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;2. インフラ関連の構築や運用、仕組みづくり&lt;/h1&gt;

&lt;p&gt;主に仕事の話になりますが、今年はインフラ関連の構築や運用に多く携わった気がします。&lt;br&gt;
（結構、雑な感じに書き残します。）&lt;/p&gt;

&lt;h3&gt;(1) メールサーバの構築と運用&lt;/h3&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Postfix&#34;&gt;Postfix&lt;/a&gt;を使ったメールサーバの構築と運用に携わりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;そもそもメールサーバってなんだっけってところからはじまったのを思い出します。&lt;/li&gt;
&lt;li&gt;とにかく運用を楽にしたかったので、その部分に多くの工夫をしました。&lt;/li&gt;
&lt;li&gt;Ansibleを使って設定の変更などのリリース作業も簡単することや&lt;/li&gt;
&lt;li&gt;Zabbixのログ監視もいい感じに機能して、不正なメール送信とかもすぐ検知できるようにしました。&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/KVM&#34;&gt;KVM&lt;/a&gt;の仮想環境上なので、環境の作りなおしも容易にしました。&lt;/li&gt;
&lt;li&gt;冗長性のために２つのリージョンに分散させたりもしました。&lt;/li&gt;
&lt;li&gt;目新しいことはないですが、わりと運用が楽な感じに作れたのでほんとによかったなと振り返って思います。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;(2) インターネットから社内NWへの入口としてのリバプロサーバ構築&lt;/h3&gt;

&lt;p&gt;インターネットから社内NWにあるシステムを利用できるようにするために、&lt;br&gt;
リバースプロキシサーバを構築しました。（運用はこれから）&lt;br&gt;
いわゆる&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/DMZ&#34;&gt;DMZ&lt;/a&gt;構成におけるリバプロです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;技術的なところで言うと、corosync+pacemakerを使って&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF%A5%EA%A5%F3%A5%B0&#34;&gt;クラスタリング&lt;/a&gt;を組みました。&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF%A5%EA%A5%F3%A5%B0&#34;&gt;クラスタリング&lt;/a&gt;は思ったより奥が深く、どのような&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF&#34;&gt;クラスタ&lt;/a&gt;を組むかかなり苦労しました。&lt;/li&gt;
&lt;li&gt;障害時に相手側サーバの電源を落とす、いわゆるフェンシングなどをどう適切に使うかなど。&lt;/li&gt;
&lt;li&gt;運用が始まってからそのあたりの実用性が確認できそうです。&lt;/li&gt;
&lt;li&gt;ちなみにNginxでリバースプロキシたてました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;(3) 仮想環境構築とか&lt;/h3&gt;

&lt;p&gt;仮想環境というと、今まで&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vagrant&#34;&gt;Vagrant&lt;/a&gt;などの&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&#34;&gt;ツール&lt;/a&gt;として、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/AWS&#34;&gt;AWS&lt;/a&gt;、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/VPS&#34;&gt;VPS&lt;/a&gt;などのIaaSとして使うばかりでした。&lt;br&gt;
今年は、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/KVM&#34;&gt;KVM&lt;/a&gt;を利用してプロダクションの仮想基盤を作るなどやりました。&lt;br&gt;
仮想化ってそもそもなんだっけ？というもう少し基礎よりの知識と向き合う機会がありました。&lt;/p&gt;

&lt;p&gt;また、主に来年の話になるがOpenStackなどを使った&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9&#34;&gt;クラウド&lt;/a&gt;環境を「作る・運用する」にも携わっていきそうです。&lt;br&gt;
すこしづつOpenStackをかじり始めました。&lt;/p&gt;

&lt;h3&gt;(4) Ansibleの活用と布教活動&lt;/h3&gt;

&lt;p&gt;Ansibleの利用は去年から始めていたことですが、&lt;br&gt;
今年はより活用することと、社内での布教活動を行いました。&lt;/p&gt;

&lt;p&gt;活用でいうと、サーバの構築はAnsibleで行ってアプリケーションのデプロイは&lt;br&gt;
別の方法でやる（手動とか…）というふうになっていたので、&lt;br&gt;
Ansibleを使ってアプリケーションのデプロイまですべて行うようにしてきました。&lt;/p&gt;

&lt;p&gt;また、こういった取り組みを社内（部内）で広めて他のチームにも活用してもらおうと、&lt;br&gt;
布教活動してしたりしてきました。&lt;/p&gt;

&lt;h1&gt;まとめ。来年の抱負的な&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryを自分が使いたいと思うようなサービスにする&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryをベースにより自分たちが学習できる環境を作る&lt;/li&gt;
&lt;li&gt;引き続き、インフラ系エンジニア？っぽい感じで邁進する

&lt;ul&gt;
&lt;li&gt;OpenStackの運用とかやりたい&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&#34;&gt;ツール&lt;/a&gt;などに踊らされない基礎力中心で学習したい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ISUCONにでます（あれば…）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;p&gt;では良いお年を。&lt;/p&gt;
&lt;/body&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年振り返り</title>
      <link>https://blog.mosuke.tech/entry/2015/12/28/150042/</link>
      <pubDate>Mon, 28 Dec 2015 15:00:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/12/28/150042/</guid>
      <description>&lt;p&gt;&lt;body&gt;
&lt;p&gt;去年に続き、2015年で技術分野でなにがあったか簡単に振り返りました。&lt;br&gt;
&lt;a href=&#34;https://blog.mosuke.tech/entry/2015/01/01/161826&#34;&gt;2014年を思い返して… - Goldstine研究所&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;

&lt;h1&gt;1. &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryの開発と公開&lt;/h1&gt;

&lt;p&gt;&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20151227/20151227172616.png&#34; alt=&#34;f:id:mosuke5:20151227172616p:plain:w300&#34; title=&#34;f:id:mosuke5:20151227172616p:plain:w300&#34; class=&#34;hatena-fotolife&#34; style=&#34;width:300px&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2014年の秋から@mogulla3と定期的にインフラ関連技術の勉強会をやってきていて、&lt;br&gt;
はじめはインプットの勉強会だけを主にやってきていたのですが、&lt;br&gt;
サービスを作る中でインフラ関連技術を駆使し勉強したいと思うようなっていました。&lt;br&gt;
そこで、今年は「&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/vim&#34;&gt;vim&lt;/a&gt;の設定をブラウザ上で即体感できるサービス &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factory」の開発をしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.mosuke.tech/entry/2015/07/19/135844/&#34;&gt;DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った - Goldstine研究所&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;良かった点&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;新しい技術などを組み合わせながら学習しがいのあるサービスを作れたこと&lt;/li&gt;
&lt;li&gt;サービスの実現技術を公開しそれなりの反響を得られたこと&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;悪かった点&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;内部的な&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3&#34;&gt;アーキテクチャ&lt;/a&gt;の変更ばかりに時間を取られサービスそのものの改良ができなかったこと&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;2. インフラ関連の構築や運用、仕組みづくり&lt;/h1&gt;

&lt;p&gt;主に仕事の話になりますが、今年はインフラ関連の構築や運用に多く携わった気がします。&lt;br&gt;
（結構、雑な感じに書き残します。）&lt;/p&gt;

&lt;h3&gt;(1) メールサーバの構築と運用&lt;/h3&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Postfix&#34;&gt;Postfix&lt;/a&gt;を使ったメールサーバの構築と運用に携わりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;そもそもメールサーバってなんだっけってところからはじまったのを思い出します。&lt;/li&gt;
&lt;li&gt;とにかく運用を楽にしたかったので、その部分に多くの工夫をしました。&lt;/li&gt;
&lt;li&gt;Ansibleを使って設定の変更などのリリース作業も簡単することや&lt;/li&gt;
&lt;li&gt;Zabbixのログ監視もいい感じに機能して、不正なメール送信とかもすぐ検知できるようにしました。&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/KVM&#34;&gt;KVM&lt;/a&gt;の仮想環境上なので、環境の作りなおしも容易にしました。&lt;/li&gt;
&lt;li&gt;冗長性のために２つのリージョンに分散させたりもしました。&lt;/li&gt;
&lt;li&gt;目新しいことはないですが、わりと運用が楽な感じに作れたのでほんとによかったなと振り返って思います。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;(2) インターネットから社内NWへの入口としてのリバプロサーバ構築&lt;/h3&gt;

&lt;p&gt;インターネットから社内NWにあるシステムを利用できるようにするために、&lt;br&gt;
リバースプロキシサーバを構築しました。（運用はこれから）&lt;br&gt;
いわゆる&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/DMZ&#34;&gt;DMZ&lt;/a&gt;構成におけるリバプロです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;技術的なところで言うと、corosync+pacemakerを使って&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF%A5%EA%A5%F3%A5%B0&#34;&gt;クラスタリング&lt;/a&gt;を組みました。&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF%A5%EA%A5%F3%A5%B0&#34;&gt;クラスタリング&lt;/a&gt;は思ったより奥が深く、どのような&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF&#34;&gt;クラスタ&lt;/a&gt;を組むかかなり苦労しました。&lt;/li&gt;
&lt;li&gt;障害時に相手側サーバの電源を落とす、いわゆるフェンシングなどをどう適切に使うかなど。&lt;/li&gt;
&lt;li&gt;運用が始まってからそのあたりの実用性が確認できそうです。&lt;/li&gt;
&lt;li&gt;ちなみにNginxでリバースプロキシたてました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;(3) 仮想環境構築とか&lt;/h3&gt;

&lt;p&gt;仮想環境というと、今まで&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vagrant&#34;&gt;Vagrant&lt;/a&gt;などの&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&#34;&gt;ツール&lt;/a&gt;として、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/AWS&#34;&gt;AWS&lt;/a&gt;、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/VPS&#34;&gt;VPS&lt;/a&gt;などのIaaSとして使うばかりでした。&lt;br&gt;
今年は、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/KVM&#34;&gt;KVM&lt;/a&gt;を利用してプロダクションの仮想基盤を作るなどやりました。&lt;br&gt;
仮想化ってそもそもなんだっけ？というもう少し基礎よりの知識と向き合う機会がありました。&lt;/p&gt;

&lt;p&gt;また、主に来年の話になるがOpenStackなどを使った&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9&#34;&gt;クラウド&lt;/a&gt;環境を「作る・運用する」にも携わっていきそうです。&lt;br&gt;
すこしづつOpenStackをかじり始めました。&lt;/p&gt;

&lt;h3&gt;(4) Ansibleの活用と布教活動&lt;/h3&gt;

&lt;p&gt;Ansibleの利用は去年から始めていたことですが、&lt;br&gt;
今年はより活用することと、社内での布教活動を行いました。&lt;/p&gt;

&lt;p&gt;活用でいうと、サーバの構築はAnsibleで行ってアプリケーションのデプロイは&lt;br&gt;
別の方法でやる（手動とか…）というふうになっていたので、&lt;br&gt;
Ansibleを使ってアプリケーションのデプロイまですべて行うようにしてきました。&lt;/p&gt;

&lt;p&gt;また、こういった取り組みを社内（部内）で広めて他のチームにも活用してもらおうと、&lt;br&gt;
布教活動してしたりしてきました。&lt;/p&gt;

&lt;h1&gt;まとめ。来年の抱負的な&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryを自分が使いたいと思うようなサービスにする&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryをベースにより自分たちが学習できる環境を作る&lt;/li&gt;
&lt;li&gt;引き続き、インフラ系エンジニア？っぽい感じで邁進する

&lt;ul&gt;
&lt;li&gt;OpenStackの運用とかやりたい&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&#34;&gt;ツール&lt;/a&gt;などに踊らされない基礎力中心で学習したい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ISUCONにでます（あれば…）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;p&gt;では良いお年を。&lt;/p&gt;
&lt;/body&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>インフラテスト(serverspec)はじめました</title>
      <link>https://blog.mosuke.tech/entry/2015/11/02/161744/</link>
      <pubDate>Mon, 02 Nov 2015 16:17:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/11/02/161744/</guid>
      <description>&lt;p&gt;&lt;body&gt;
&lt;p&gt;※執筆後、業務でもserverspecを利用し始めたのもあり、業務レベルでの実践例も追記している。&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;運営中の&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryでserverspecを使ったインフラテストを導入したので、
導入理由や工夫している点、悩んでいる点について記述します。&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryについてはこっちみてね。
&lt;a href=&#34;https://blog.mosuke.tech/entry/2015/07/19/135844/&#34;&gt;DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った - Goldstine研究所&lt;/a&gt;

&lt;h1&gt;1. serverspecってなによ&lt;/h1&gt;

&lt;p&gt;詳しくは公式サイトや書籍などを参考にして欲しいですが、&lt;br&gt;
「サーバの状態をコードで自動的にテスト・確認するためのツール」です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://serverspec.org&#34;&gt;Serverspec - Home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例えば、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Apache&#34;&gt;Apache&lt;/a&gt;でWebサーバを組んでいるサーバがあったとして、下記の要件で動いているとします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/apache&#34;&gt;apache&lt;/a&gt;がインス&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB&#34;&gt;トール&lt;/a&gt;されていること&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/apache&#34;&gt;apache&lt;/a&gt;が起動していること、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%BC%AB%C6%B0%B5%AF%C6%B0&#34;&gt;自動起動&lt;/a&gt;する設定であること&lt;/li&gt;
&lt;li&gt;ポート80があいていること&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この要件をサーバが満たしているかコードでテストします。&lt;br&gt;
上記の例だとこんなコードを書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe package(&#39;httpd&#39;) do
  it { should be_installed }
end

describe service(&#39;httpd&#39;) do
  it { should be_enabled   }
  it { should be_running   }
end

describe port(80) do
  it { should be_listening }
end
 

&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;各種テストの立ち位置&lt;/h1&gt;

&lt;p&gt;&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20170416/20170416114252.jpg&#34; alt=&#34;f:id:mosuke5:20170416114252j:plain:w600&#34; title=&#34;f:id:mosuke5:20170416114252j:plain:w600&#34; class=&#34;hatena-fotolife&#34; style=&#34;width:600px&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;serverspecは、サーバの状態（正しく設定されたか）を確認するためのテストツールです&lt;/li&gt;
&lt;li&gt;サーバの振る舞いのテストは別のツールを使うことをおすすめします&lt;/li&gt;
&lt;li&gt;また、監視も一種のテストと言えます&lt;/li&gt;
&lt;li&gt;一般的には監視はその実行頻度の高さから、振る舞いを監視することが多い&lt;/li&gt;
&lt;li&gt;監視ツールで、Configファイルが正しいかは見ない&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;2. なんで導入したの？&lt;/h1&gt;

&lt;p&gt;serverspecを導入したのには大きく2つの理由があります。&lt;/p&gt;

&lt;h2&gt;(その１) インフラの&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C6%A5%B9%A5%C8%B6%EE%C6%B0%B3%AB%C8%AF&#34;&gt;テスト駆動開発&lt;/a&gt;を支えるため&lt;/h2&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryは趣味で開発・運用しているサービスで、まだ作りたての発展途上のサービスです。&lt;br&gt;
（作って公開してからは日が経っている気もしますが、週1の開発なので…）&lt;br&gt;
そのため、今後もインフラコードをガンガン修正していくことを想定しています。&lt;br&gt;
ですので、その開発、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&#34;&gt;リファクタリング&lt;/a&gt;を支えるべく、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C6%A5%B9%A5%C8%B6%EE%C6%B0%B3%AB%C8%AF&#34;&gt;テスト駆動開発&lt;/a&gt;で行えるようにするためです。&lt;/p&gt;

&lt;h2&gt;(その２) インフラテストの必要性を深く理解するため&lt;/h2&gt;

&lt;p&gt;「インフラテストの必要性を深く理解するため」です。&lt;br&gt;
必要性があるから導入したんじゃにないの？と思われるかもしれませんが、&lt;br&gt;
ぼくはまだインフラテストの本当の必要性を理解できていないと思っています。&lt;/p&gt;

&lt;p&gt;実は、はじめこんな風に思っていましたし、今でも少し思う部分もある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ansibleやchefで実行結果がOKならそれでテストも兼ねているのでは？&lt;/li&gt;
&lt;li&gt;実際にどんな項目をテストすればいいか、考えてみた時にピンと来ない…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実際に試してみないと、その本質が見えてこないと思っているので、&lt;br&gt;
導入してみて自分の肌で感じようと思っています。&lt;/p&gt;

&lt;p&gt;個人的なお話なのでみなさんには関係のない話ではありますが、&lt;br&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryの開発は企業でもなければ営利目的でもありません。&lt;br&gt;
「週末にインフラ技術のインプット勉強をしていたが、それだけでは飽きてきて、&lt;br&gt;
サービスを開発・運用していくなかでインフラ技術を磨いていきたい」
というものだったので、こういった実験も大歓迎だったのです。&lt;/p&gt;

&lt;h1&gt;3. 工夫している点&lt;/h1&gt;

&lt;h1&gt;チーム内でインフラテストコードの「指針」を決める&lt;/h1&gt;

&lt;p&gt;Ansibleなど構成管理ツールがあるなかで、本当にインフラテストっているの？とはじめは誰もが思うはずです。&lt;br&gt;
「なんとなく」、「流行っているから」という理由で導入をすると、&lt;br&gt;
きっと&lt;b&gt;チーム内でインフラテストを書く意味や目的が異なって&lt;/b&gt;きてしまいます。&lt;br&gt;
また、serverspecはいろんな使い方ができてしまうので、なおさら人によって考え方が異なってしまいます。&lt;/p&gt;

&lt;p&gt;ですので、チーム内でインフラテストコードの「指針」を決めて共有しています。&lt;br&gt;
こうすることで、「なぜインフラテストコードを書くのか」の目的意識を統一しています。&lt;/p&gt;

&lt;p&gt;この指針には、下記の本をかなり参考にしました。（serverspec作者の本です）
&lt;/p&gt;
&lt;div class=&#34;hatena-asin-detail&#34;&gt;
&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117097/hatena-blog-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51P6qVOPALL._SL160_.jpg&#34; class=&#34;hatena-asin-detail-image&#34; alt=&#34;Serverspec&#34; title=&#34;Serverspec&#34;&gt;&lt;/a&gt;&lt;div class=&#34;hatena-asin-detail-info&#34;&gt;
&lt;p class=&#34;hatena-asin-detail-title&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117097/hatena-blog-22/&#34;&gt;Serverspec&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;span class=&#34;hatena-asin-detail-label&#34;&gt;作者:&lt;/span&gt; 宮下剛輔&lt;/li&gt;
&lt;li&gt;
&lt;span class=&#34;hatena-asin-detail-label&#34;&gt;出版社/メーカー:&lt;/span&gt; &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%AA%A5%E9%A5%A4%A5%EA%A1%BC%A5%B8%A5%E3%A5%D1%A5%F3&#34;&gt;オライリージャパン&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span class=&#34;hatena-asin-detail-label&#34;&gt;発売日:&lt;/span&gt; 2015/01/17&lt;/li&gt;
&lt;li&gt;
&lt;span class=&#34;hatena-asin-detail-label&#34;&gt;メディア:&lt;/span&gt; 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/asin/4873117097/hatena-blog-22&#34; target=&#34;_blank&#34;&gt;この商品を含むブログ (6件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;hatena-asin-detail-foot&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;テストをサーバの役割毎にまとめる&lt;/h1&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8&#34;&gt;ディレクト&lt;/a&gt;リの主な構成は下記のようになっています。&lt;br&gt;
（実際にはもっとファイルやホストが多いですがイメージです。）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├ Rakefile
├ spec/
│ └ spec_helper.rb
│ ├ base/
│ │   ├ user_spec.rb
│ │   └ selinux_spec.rb
│ ├ proxy/
│ │   └ nginx_spec.rb
│ └ app/
│     └ vimfactory-app_spec.rb
└ sshconfig 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nginxなどを搭載するプロキシサーバと&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%A2%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3%A5%B5%A1%BC%A5%D0&#34;&gt;アプリケーションサーバ&lt;/a&gt;があり、それぞれにロールを割り振ります。&lt;br&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Rakefile&#34;&gt;Rakefile&lt;/a&gt;内に書いてます。もし記述が増えるようだと別ファイルに切り出すと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hosts = [
  {
    :name   =&amp;gt; &amp;quot;proxy.vimfactory&amp;quot;,
    :roles  =&amp;gt; %w( base proxy )
  },
  {
    :name   =&amp;gt; &amp;quot;app.vimfactory&amp;quot;,
    :roles  =&amp;gt; %w( base app )
  }
]
 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにすることで、役割の違うサーバでも共有するテスト項目はコードの重複なくテストできます。&lt;br&gt;
また拡張性もそこそこいい感じなんじゃないかと思っています。&lt;/p&gt;

&lt;h1&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/ssh&#34;&gt;ssh&lt;/a&gt;の設定ファイルを任意で指定する&lt;/h1&gt;

&lt;p&gt;serverspecを使っていると&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/ssh&#34;&gt;ssh&lt;/a&gt;のクライアント側の設定ファイルを利用することがでてきます。&lt;br&gt;
&lt;code&gt;serverspec-init&lt;/code&gt;コマンドで生成されるspec_helper.rbでは&lt;code&gt;~/.ssh/config&lt;/code&gt;をデフォルトで読むようになっています。&lt;/p&gt;

&lt;p&gt;ですが個人的には&lt;code&gt;~/.ssh/config&lt;/code&gt;にプロジェクトの設定を書くのがあまり好きではないし、効果的でないことがあると考えています。&lt;br&gt;
&lt;code&gt;~/.ssh/config&lt;/code&gt;は個人のPCなどの設定によって各々違うものです。&lt;br&gt;
そこにプロジェクト固有の設定を書くと、設定が衝突したり、管理が難しくなります。&lt;/p&gt;

&lt;p&gt;ですので、プロジェクトで使う&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/ssh&#34;&gt;ssh&lt;/a&gt;のクライアントの設定ファイルもgit管理しておいて、&lt;br&gt;
それを使うようにすることが望ましいと思っています。&lt;/p&gt;

&lt;p&gt;そこで、spec_helper.rbの&lt;code&gt;Net::SSH::Config&lt;/code&gt;部分を修正し、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/ssh&#34;&gt;ssh&lt;/a&gt;の設定ファイルを任意で指定できるようにしています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config  = ENV[&#39;SSH_CONFIG&#39;]
options = Net::SSH::Config.for(host, [config])
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行時に指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec rake serverspec SSH_CONFIG=sshconfig 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;デプロイ作業での活用&lt;/h1&gt;

&lt;p&gt;serverspecは主に、インフラの&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C6%A5%B9%A5%C8%B6%EE%C6%B0%B3%AB%C8%AF&#34;&gt;テスト駆動開発&lt;/a&gt;のために導入したのですが、
本番環境でのデプロイ作業（インフラ設定の変更）にも大活躍しています。&lt;/p&gt;

&lt;p&gt;デプロイ作業時に、下記ステップで行うことで、デプロイ作業の安心感を得るとともに、&lt;br&gt;
作業後の確認作業を軽減できたのはとても素晴らしいことでした。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;serverspec実行：テスト落ちる&lt;/li&gt;
&lt;li&gt;Ansible実行：デプロイ&lt;/li&gt;
&lt;li&gt;serverspec：テスト通る&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;4. 悩んでいること。これからについて&lt;/h1&gt;

&lt;p&gt;serverspecのCIの方法に悩んでいます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;どうやってCIをやるのが効率的か？&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::FactoryはAnsibleでアプリケーションのデプロイまで行っているのだけど、&lt;/li&gt;
&lt;li&gt;インフラテストとアプリのテスト同時にやってほうがよくないだろうか？&lt;/li&gt;
&lt;li&gt;でも、アプリのテストをするごとにAnsibleで環境構築すると時間がかかってしまう。&lt;/li&gt;
&lt;li&gt;上記を解決するためにCI用にDockerイメージを作るという案もあるけど、そこまでするべきか？？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これからは、どうCIをしていくか。&lt;br&gt;
インフラテストとアプリのテストをどう結びつけていくか。&lt;br&gt;
このあたりが課題と考えています。&lt;/p&gt;

&lt;h1&gt;(追記)インフラCI失敗した&lt;/h1&gt;

&lt;p&gt;よくある構成例ではあるが、下記のようにGitlabCI+ DigitalOceanを使ってインフラCIの検討を行った。&lt;br&gt;
&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20170416/20170416125051.jpg&#34; alt=&#34;f:id:mosuke5:20170416125051j:plain:w600&#34; title=&#34;f:id:mosuke5:20170416125051j:plain:w600&#34; class=&#34;hatena-fotolife&#34; style=&#34;width:600px&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;しかし、結果的には運用にのるところまでいかなかった。理由はこんな感じ。&lt;br&gt;
正直、趣味でやってる範囲にしては、ここを突破するモチベーションがなかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;実行に膨大な時間がかかる&lt;/li&gt;
&lt;li&gt;それゆえにたまに&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%A2%A5%A6%A5%C8&#34;&gt;タイムアウト&lt;/a&gt;で死ぬ&lt;/li&gt;
&lt;li&gt;DigitalOcean&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&#34;&gt;インスタンス&lt;/a&gt;の停止に失敗した場合が面倒（笑）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/body&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>インフラテスト(serverspec)はじめました</title>
      <link>https://blog.mosuke.tech/entry/2015/11/02/161744/</link>
      <pubDate>Mon, 02 Nov 2015 16:17:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/11/02/161744/</guid>
      <description>&lt;p&gt;&lt;body&gt;
&lt;p&gt;※執筆後、業務でもserverspecを利用し始めたのもあり、業務レベルでの実践例も追記している。&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;運営中の&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryでserverspecを使ったインフラテストを導入したので、
導入理由や工夫している点、悩んでいる点について記述します。&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryについてはこっちみてね。
&lt;a href=&#34;https://blog.mosuke.tech/entry/2015/07/19/135844/&#34;&gt;DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った - Goldstine研究所&lt;/a&gt;

&lt;h1&gt;1. serverspecってなによ&lt;/h1&gt;

&lt;p&gt;詳しくは公式サイトや書籍などを参考にして欲しいですが、&lt;br&gt;
「サーバの状態をコードで自動的にテスト・確認するためのツール」です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://serverspec.org&#34;&gt;Serverspec - Home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例えば、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Apache&#34;&gt;Apache&lt;/a&gt;でWebサーバを組んでいるサーバがあったとして、下記の要件で動いているとします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/apache&#34;&gt;apache&lt;/a&gt;がインス&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB&#34;&gt;トール&lt;/a&gt;されていること&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/apache&#34;&gt;apache&lt;/a&gt;が起動していること、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%BC%AB%C6%B0%B5%AF%C6%B0&#34;&gt;自動起動&lt;/a&gt;する設定であること&lt;/li&gt;
&lt;li&gt;ポート80があいていること&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この要件をサーバが満たしているかコードでテストします。&lt;br&gt;
上記の例だとこんなコードを書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe package(&#39;httpd&#39;) do
  it { should be_installed }
end

describe service(&#39;httpd&#39;) do
  it { should be_enabled   }
  it { should be_running   }
end

describe port(80) do
  it { should be_listening }
end
 

&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;各種テストの立ち位置&lt;/h1&gt;

&lt;p&gt;&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20170416/20170416114252.jpg&#34; alt=&#34;f:id:mosuke5:20170416114252j:plain:w600&#34; title=&#34;f:id:mosuke5:20170416114252j:plain:w600&#34; class=&#34;hatena-fotolife&#34; style=&#34;width:600px&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;serverspecは、サーバの状態（正しく設定されたか）を確認するためのテストツールです&lt;/li&gt;
&lt;li&gt;サーバの振る舞いのテストは別のツールを使うことをおすすめします&lt;/li&gt;
&lt;li&gt;また、監視も一種のテストと言えます&lt;/li&gt;
&lt;li&gt;一般的には監視はその実行頻度の高さから、振る舞いを監視することが多い&lt;/li&gt;
&lt;li&gt;監視ツールで、Configファイルが正しいかは見ない&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;2. なんで導入したの？&lt;/h1&gt;

&lt;p&gt;serverspecを導入したのには大きく2つの理由があります。&lt;/p&gt;

&lt;h2&gt;(その１) インフラの&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C6%A5%B9%A5%C8%B6%EE%C6%B0%B3%AB%C8%AF&#34;&gt;テスト駆動開発&lt;/a&gt;を支えるため&lt;/h2&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryは趣味で開発・運用しているサービスで、まだ作りたての発展途上のサービスです。&lt;br&gt;
（作って公開してからは日が経っている気もしますが、週1の開発なので…）&lt;br&gt;
そのため、今後もインフラコードをガンガン修正していくことを想定しています。&lt;br&gt;
ですので、その開発、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&#34;&gt;リファクタリング&lt;/a&gt;を支えるべく、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C6%A5%B9%A5%C8%B6%EE%C6%B0%B3%AB%C8%AF&#34;&gt;テスト駆動開発&lt;/a&gt;で行えるようにするためです。&lt;/p&gt;

&lt;h2&gt;(その２) インフラテストの必要性を深く理解するため&lt;/h2&gt;

&lt;p&gt;「インフラテストの必要性を深く理解するため」です。&lt;br&gt;
必要性があるから導入したんじゃにないの？と思われるかもしれませんが、&lt;br&gt;
ぼくはまだインフラテストの本当の必要性を理解できていないと思っています。&lt;/p&gt;

&lt;p&gt;実は、はじめこんな風に思っていましたし、今でも少し思う部分もある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ansibleやchefで実行結果がOKならそれでテストも兼ねているのでは？&lt;/li&gt;
&lt;li&gt;実際にどんな項目をテストすればいいか、考えてみた時にピンと来ない…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実際に試してみないと、その本質が見えてこないと思っているので、&lt;br&gt;
導入してみて自分の肌で感じようと思っています。&lt;/p&gt;

&lt;p&gt;個人的なお話なのでみなさんには関係のない話ではありますが、&lt;br&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryの開発は企業でもなければ営利目的でもありません。&lt;br&gt;
「週末にインフラ技術のインプット勉強をしていたが、それだけでは飽きてきて、&lt;br&gt;
サービスを開発・運用していくなかでインフラ技術を磨いていきたい」
というものだったので、こういった実験も大歓迎だったのです。&lt;/p&gt;

&lt;h1&gt;3. 工夫している点&lt;/h1&gt;

&lt;h1&gt;チーム内でインフラテストコードの「指針」を決める&lt;/h1&gt;

&lt;p&gt;Ansibleなど構成管理ツールがあるなかで、本当にインフラテストっているの？とはじめは誰もが思うはずです。&lt;br&gt;
「なんとなく」、「流行っているから」という理由で導入をすると、&lt;br&gt;
きっと&lt;b&gt;チーム内でインフラテストを書く意味や目的が異なって&lt;/b&gt;きてしまいます。&lt;br&gt;
また、serverspecはいろんな使い方ができてしまうので、なおさら人によって考え方が異なってしまいます。&lt;/p&gt;

&lt;p&gt;ですので、チーム内でインフラテストコードの「指針」を決めて共有しています。&lt;br&gt;
こうすることで、「なぜインフラテストコードを書くのか」の目的意識を統一しています。&lt;/p&gt;

&lt;p&gt;この指針には、下記の本をかなり参考にしました。（serverspec作者の本です）
&lt;/p&gt;
&lt;div class=&#34;hatena-asin-detail&#34;&gt;
&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117097/hatena-blog-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51P6qVOPALL._SL160_.jpg&#34; class=&#34;hatena-asin-detail-image&#34; alt=&#34;Serverspec&#34; title=&#34;Serverspec&#34;&gt;&lt;/a&gt;&lt;div class=&#34;hatena-asin-detail-info&#34;&gt;
&lt;p class=&#34;hatena-asin-detail-title&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117097/hatena-blog-22/&#34;&gt;Serverspec&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;span class=&#34;hatena-asin-detail-label&#34;&gt;作者:&lt;/span&gt; 宮下剛輔&lt;/li&gt;
&lt;li&gt;
&lt;span class=&#34;hatena-asin-detail-label&#34;&gt;出版社/メーカー:&lt;/span&gt; &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%AA%A5%E9%A5%A4%A5%EA%A1%BC%A5%B8%A5%E3%A5%D1%A5%F3&#34;&gt;オライリージャパン&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span class=&#34;hatena-asin-detail-label&#34;&gt;発売日:&lt;/span&gt; 2015/01/17&lt;/li&gt;
&lt;li&gt;
&lt;span class=&#34;hatena-asin-detail-label&#34;&gt;メディア:&lt;/span&gt; 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/asin/4873117097/hatena-blog-22&#34; target=&#34;_blank&#34;&gt;この商品を含むブログ (6件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;hatena-asin-detail-foot&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;テストをサーバの役割毎にまとめる&lt;/h1&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8&#34;&gt;ディレクト&lt;/a&gt;リの主な構成は下記のようになっています。&lt;br&gt;
（実際にはもっとファイルやホストが多いですがイメージです。）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├ Rakefile
├ spec/
│ └ spec_helper.rb
│ ├ base/
│ │   ├ user_spec.rb
│ │   └ selinux_spec.rb
│ ├ proxy/
│ │   └ nginx_spec.rb
│ └ app/
│     └ vimfactory-app_spec.rb
└ sshconfig 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nginxなどを搭載するプロキシサーバと&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%A2%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3%A5%B5%A1%BC%A5%D0&#34;&gt;アプリケーションサーバ&lt;/a&gt;があり、それぞれにロールを割り振ります。&lt;br&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Rakefile&#34;&gt;Rakefile&lt;/a&gt;内に書いてます。もし記述が増えるようだと別ファイルに切り出すと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hosts = [
  {
    :name   =&amp;gt; &amp;quot;proxy.vimfactory&amp;quot;,
    :roles  =&amp;gt; %w( base proxy )
  },
  {
    :name   =&amp;gt; &amp;quot;app.vimfactory&amp;quot;,
    :roles  =&amp;gt; %w( base app )
  }
]
 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにすることで、役割の違うサーバでも共有するテスト項目はコードの重複なくテストできます。&lt;br&gt;
また拡張性もそこそこいい感じなんじゃないかと思っています。&lt;/p&gt;

&lt;h1&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/ssh&#34;&gt;ssh&lt;/a&gt;の設定ファイルを任意で指定する&lt;/h1&gt;

&lt;p&gt;serverspecを使っていると&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/ssh&#34;&gt;ssh&lt;/a&gt;のクライアント側の設定ファイルを利用することがでてきます。&lt;br&gt;
&lt;code&gt;serverspec-init&lt;/code&gt;コマンドで生成されるspec_helper.rbでは&lt;code&gt;~/.ssh/config&lt;/code&gt;をデフォルトで読むようになっています。&lt;/p&gt;

&lt;p&gt;ですが個人的には&lt;code&gt;~/.ssh/config&lt;/code&gt;にプロジェクトの設定を書くのがあまり好きではないし、効果的でないことがあると考えています。&lt;br&gt;
&lt;code&gt;~/.ssh/config&lt;/code&gt;は個人のPCなどの設定によって各々違うものです。&lt;br&gt;
そこにプロジェクト固有の設定を書くと、設定が衝突したり、管理が難しくなります。&lt;/p&gt;

&lt;p&gt;ですので、プロジェクトで使う&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/ssh&#34;&gt;ssh&lt;/a&gt;のクライアントの設定ファイルもgit管理しておいて、&lt;br&gt;
それを使うようにすることが望ましいと思っています。&lt;/p&gt;

&lt;p&gt;そこで、spec_helper.rbの&lt;code&gt;Net::SSH::Config&lt;/code&gt;部分を修正し、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/ssh&#34;&gt;ssh&lt;/a&gt;の設定ファイルを任意で指定できるようにしています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config  = ENV[&#39;SSH_CONFIG&#39;]
options = Net::SSH::Config.for(host, [config])
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行時に指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec rake serverspec SSH_CONFIG=sshconfig 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;デプロイ作業での活用&lt;/h1&gt;

&lt;p&gt;serverspecは主に、インフラの&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C6%A5%B9%A5%C8%B6%EE%C6%B0%B3%AB%C8%AF&#34;&gt;テスト駆動開発&lt;/a&gt;のために導入したのですが、
本番環境でのデプロイ作業（インフラ設定の変更）にも大活躍しています。&lt;/p&gt;

&lt;p&gt;デプロイ作業時に、下記ステップで行うことで、デプロイ作業の安心感を得るとともに、&lt;br&gt;
作業後の確認作業を軽減できたのはとても素晴らしいことでした。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;serverspec実行：テスト落ちる&lt;/li&gt;
&lt;li&gt;Ansible実行：デプロイ&lt;/li&gt;
&lt;li&gt;serverspec：テスト通る&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;4. 悩んでいること。これからについて&lt;/h1&gt;

&lt;p&gt;serverspecのCIの方法に悩んでいます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;どうやってCIをやるのが効率的か？&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::FactoryはAnsibleでアプリケーションのデプロイまで行っているのだけど、&lt;/li&gt;
&lt;li&gt;インフラテストとアプリのテスト同時にやってほうがよくないだろうか？&lt;/li&gt;
&lt;li&gt;でも、アプリのテストをするごとにAnsibleで環境構築すると時間がかかってしまう。&lt;/li&gt;
&lt;li&gt;上記を解決するためにCI用にDockerイメージを作るという案もあるけど、そこまでするべきか？？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これからは、どうCIをしていくか。&lt;br&gt;
インフラテストとアプリのテストをどう結びつけていくか。&lt;br&gt;
このあたりが課題と考えています。&lt;/p&gt;

&lt;h1&gt;(追記)インフラCI失敗した&lt;/h1&gt;

&lt;p&gt;よくある構成例ではあるが、下記のようにGitlabCI+ DigitalOceanを使ってインフラCIの検討を行った。&lt;br&gt;
&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20170416/20170416125051.jpg&#34; alt=&#34;f:id:mosuke5:20170416125051j:plain:w600&#34; title=&#34;f:id:mosuke5:20170416125051j:plain:w600&#34; class=&#34;hatena-fotolife&#34; style=&#34;width:600px&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;しかし、結果的には運用にのるところまでいかなかった。理由はこんな感じ。&lt;br&gt;
正直、趣味でやってる範囲にしては、ここを突破するモチベーションがなかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;実行に膨大な時間がかかる&lt;/li&gt;
&lt;li&gt;それゆえにたまに&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%A2%A5%A6%A5%C8&#34;&gt;タイムアウト&lt;/a&gt;で死ぬ&lt;/li&gt;
&lt;li&gt;DigitalOcean&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&#34;&gt;インスタンス&lt;/a&gt;の停止に失敗した場合が面倒（笑）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/body&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った</title>
      <link>https://blog.mosuke.tech/entry/2015/07/19/135844/</link>
      <pubDate>Sun, 19 Jul 2015 13:58:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/07/19/135844/</guid>
      <description>&lt;p&gt;&lt;body&gt;
&lt;p&gt;2014年の秋から&lt;code&gt;@mogulla3&lt;/code&gt;と定期的にインフラ関連技術の勉強会をやってきましたが、&lt;br&gt;
インプットの勉強会だけでは飽き足らず、いつしかサービスを作る中でインフラ関連技術を駆使し勉強したいと思うように…&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;そして、普段使っている&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を題材に、&lt;br&gt;
&lt;b&gt;&lt;span style=&#34;font-size: 150%&#34;&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/vim&#34;&gt;vim&lt;/a&gt;の設定をブラウザ上で即体感できるサービス &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factory&lt;/span&gt;&lt;/b&gt;&lt;br&gt;
を開発しました。&lt;/p&gt;

&lt;p&gt;本記事は&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryの簡単な紹介と技術的な仕組みについて記述しています。&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryはこちら。&lt;br&gt;
&lt;a href=&#34;http://vimfactory.com/&#34;&gt;http://vimfactory.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;1. &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryについて&lt;/h1&gt;

&lt;h2&gt;1-1. &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryってなに？？&lt;/h2&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryは、選択した&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の設定を、ブラウザ上で「即体感」できるサービスです。&lt;br&gt;
数多くあり複雑な&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の設定を容易にし、お気に入りの&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;探しをサポートすることを目指しています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20150719/20150719155723.png&#34; alt=&#34;f:id:mosuke5:20150719155723p:plain&#34; title=&#34;f:id:mosuke5:20150719155723p:plain&#34; class=&#34;hatena-fotolife&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;1-2. なんで作ったの？&lt;/h2&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の設定ってたくさんあってどれを選んでいいかわからなかったり、&lt;br&gt;
設定したもののどう変わったかイマイチわからなかったりしませんか？&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の設定がどのように反映されるか、もっと簡単に体験したいと考えたからです。&lt;/p&gt;

&lt;p&gt;あと、例えば&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Github&#34;&gt;Github&lt;/a&gt;で100star以上をつける人の&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;をブラウザ上で体験できたらいいなと思っていて、&lt;br&gt;
それを実現のための第一歩としてこのサービスを作りました。&lt;/p&gt;

&lt;h2&gt;1-3. このサービスの最大の特徴は？&lt;/h2&gt;

&lt;p&gt;このサービスの最大の特徴はなんといっても&lt;b&gt;「ブラウザ上で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;が体感できること」&lt;/b&gt;です。&lt;/p&gt;

&lt;p&gt;今までは&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の設定を試そうと思ったら、ネットで調べて自分の&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;に反映させて…という作業が必要でしたが、&lt;br&gt;
ブラウザ上で設定を即体感するという新しい体験を提供するために力を注いできました。&lt;br&gt;
その実現方法については、後述しています。&lt;/p&gt;

&lt;h2&gt;1-4. 紹介動画&lt;/h2&gt;

&lt;p&gt;詳しくは、実際に試してもらうのが早いと思いますが、簡単な操作動画を用意してみました。&lt;br&gt;
モバイルからこのサービスはちょっと使えないので、モバイルで読んでいる方は動画でお楽しみください(笑)&lt;br&gt;
&lt;iframe width=&#34;480&#34; height=&#34;270&#34; src=&#34;https://www.youtube.com/embed/j20agcBcAec?feature=oembed&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;cite class=&#34;hatena-citation&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=j20agcBcAec&amp;amp;feature=youtu.be&#34;&gt;www.youtube.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h1&gt;2. &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryの技術について&lt;/h1&gt;

&lt;p&gt;ここから&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryの技術について一部ではありますがご紹介します。&lt;/p&gt;

&lt;h2&gt;2-1. ブラウザ上での&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を実現した技術&lt;/h2&gt;

&lt;p&gt;ブラウザ上で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を実現しようと思うと、ぱっと思いつくのは&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/JavaScript&#34;&gt;JavaScript&lt;/a&gt;で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;そのものを実装してしまおうというものかもしれません。&lt;br&gt;
ですが、JSで&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を実装することってどれくらい難しいでしょうか？&lt;br&gt;
少なくともぼくにはそんなことはできませんし、できたとして質の悪いものになってしまうと思います。&lt;/p&gt;

&lt;p&gt;そこで思いついたのが、一般的なターミナルソフトと同様にサーバ上で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/vim&#34;&gt;vim&lt;/a&gt;を起動し、&lt;br&gt;
そのターミナル情報をブラウザ上で表示するという方法です。&lt;br&gt;
この方法であれば自ら&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を実装せずとも&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を再現できます。イメージは下記のとおりです。&lt;br&gt;
&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20150718/20150718230605.png&#34; alt=&#34;f:id:mosuke5:20150718230605p:plain&#34; title=&#34;f:id:mosuke5:20150718230605p:plain&#34; class=&#34;hatena-fotolife&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;また、サービスとして上記を行うには、接続してきたユーザごとに&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を用意する必要があります。&lt;/p&gt;

&lt;p&gt;これらを実現するために利用したのが&lt;b&gt;Docker&lt;/b&gt;と&lt;b&gt;WebSocket&lt;/b&gt;です。&lt;br&gt;
dockerコンテナ上で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を起動し、そのターミナル情報をWebSocketでブラウザに送信するようにしました。
&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20150720/20150720002840.png&#34; alt=&#34;f:id:mosuke5:20150720002840p:plain&#34; title=&#34;f:id:mosuke5:20150720002840p:plain&#34; class=&#34;hatena-fotolife&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;dockerはコンテナ型の仮想化なので起動がとてもはやく、&lt;br&gt;
httpのリクエストが来てからdockerコンテナを立ち上げても十分なほどのはやさをもっています。&lt;/p&gt;

&lt;h2&gt;2-2. 全体構成&lt;/h2&gt;

&lt;p&gt;システムの全体構成は以下のような感じです。&lt;br&gt;
※実際の役割は図のとおりですが、サーバはこんなに多くありません。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20150719/20150719124021.png&#34; alt=&#34;f:id:mosuke5:20150719124021p:plain&#34; title=&#34;f:id:mosuke5:20150719124021p:plain&#34; class=&#34;hatena-fotolife&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;2-3. 利用した技術とか&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&#34;&gt;ツール&lt;/a&gt;のまとめ&lt;/h2&gt;

&lt;p&gt;振り返りも兼ねて利用した技術・&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&#34;&gt;ツール&lt;/a&gt;を一覧にまとめておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Sinatra&#34;&gt;Sinatra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;thin&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;Websocket&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/memcached&#34;&gt;memcached&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;docker&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;centos7&lt;/li&gt;
&lt;li&gt;Ansible&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vagrant&#34;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gitlab&lt;/li&gt;
&lt;li&gt;mackerel&lt;/li&gt;
&lt;li&gt;slack&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/esa&#34;&gt;esa&lt;/a&gt;.io(ドキュメント管理)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;3. まとめ&lt;/h1&gt;

&lt;p&gt;このサービスで一番苦労したことはやっぱりブラウザ上での&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の実現部分です。&lt;br&gt;
当初、このサービスを思いついた時、実現不可能だ…とあきらめました。&lt;br&gt;
というのもJS（アプリケーションサイド）で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;をどう実装しようかしか考えていなかったからです。&lt;/p&gt;

&lt;p&gt;ですが、ふとしたときに上記の別の方法（インフラサイド）での実現方法を思いつきました。&lt;/p&gt;

&lt;p&gt;このサービスを作るきっかけは、インフラ技術のインプット勉強だけでは飽きたらず、&lt;br&gt;
サービスを開発・運用していくなかでインフラ技術を磨いていきたいというものでしたが、&lt;br&gt;
インプットの勉強があってこそインフラサイドからの実現方法を見つけられたようにも思いました。&lt;/p&gt;

&lt;p&gt;今後、運用を通してさらなるパワーアップができたらいいなと思います。&lt;/p&gt;

&lt;h1&gt;4. 最後に&lt;/h1&gt;

&lt;p&gt;最後になりますが、
完全な趣味で作ってしまったサービスで、今後どのように展開していこうか何も考えていません。&lt;br&gt;
まずは、このように公開し皆様に利用して頂いて、フィードバックなど頂いてから考えようと思っています。&lt;/p&gt;

&lt;p&gt;サービスに関するご意見等あれば、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Twitter&#34;&gt;Twitter&lt;/a&gt;やメールで書いてくれると大変嬉しいです。&lt;/p&gt;

&lt;p&gt;お問い合せはこちら:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Twitter&#34;&gt;Twitter&lt;/a&gt;: &lt;a href=&#34;https://twitter.com/mosuke5&#34;&gt;もーすけ (@mosuke5) | Twitter&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/mogulla3&#34;&gt;もぐらマン (@mogulla3) | Twitter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;e-mail: ilab.vimfactory+info@&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/gmail&#34;&gt;gmail&lt;/a&gt;.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では、みなさんも&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;ライフを楽しみましょう！&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryはこちら。&lt;br&gt;
&lt;a href=&#34;http://vimfactory.com/&#34;&gt;http://vimfactory.com/&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った</title>
      <link>https://blog.mosuke.tech/entry/2015/07/19/135844/</link>
      <pubDate>Sun, 19 Jul 2015 13:58:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/07/19/135844/</guid>
      <description>&lt;p&gt;&lt;body&gt;
&lt;p&gt;2014年の秋から&lt;code&gt;@mogulla3&lt;/code&gt;と定期的にインフラ関連技術の勉強会をやってきましたが、&lt;br&gt;
インプットの勉強会だけでは飽き足らず、いつしかサービスを作る中でインフラ関連技術を駆使し勉強したいと思うように…&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;そして、普段使っている&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を題材に、&lt;br&gt;
&lt;b&gt;&lt;span style=&#34;font-size: 150%&#34;&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/vim&#34;&gt;vim&lt;/a&gt;の設定をブラウザ上で即体感できるサービス &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factory&lt;/span&gt;&lt;/b&gt;&lt;br&gt;
を開発しました。&lt;/p&gt;

&lt;p&gt;本記事は&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryの簡単な紹介と技術的な仕組みについて記述しています。&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryはこちら。&lt;br&gt;
&lt;a href=&#34;http://vimfactory.com/&#34;&gt;http://vimfactory.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;1. &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryについて&lt;/h1&gt;

&lt;h2&gt;1-1. &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryってなに？？&lt;/h2&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryは、選択した&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の設定を、ブラウザ上で「即体感」できるサービスです。&lt;br&gt;
数多くあり複雑な&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の設定を容易にし、お気に入りの&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;探しをサポートすることを目指しています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20150719/20150719155723.png&#34; alt=&#34;f:id:mosuke5:20150719155723p:plain&#34; title=&#34;f:id:mosuke5:20150719155723p:plain&#34; class=&#34;hatena-fotolife&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;1-2. なんで作ったの？&lt;/h2&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の設定ってたくさんあってどれを選んでいいかわからなかったり、&lt;br&gt;
設定したもののどう変わったかイマイチわからなかったりしませんか？&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の設定がどのように反映されるか、もっと簡単に体験したいと考えたからです。&lt;/p&gt;

&lt;p&gt;あと、例えば&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Github&#34;&gt;Github&lt;/a&gt;で100star以上をつける人の&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;をブラウザ上で体験できたらいいなと思っていて、&lt;br&gt;
それを実現のための第一歩としてこのサービスを作りました。&lt;/p&gt;

&lt;h2&gt;1-3. このサービスの最大の特徴は？&lt;/h2&gt;

&lt;p&gt;このサービスの最大の特徴はなんといっても&lt;b&gt;「ブラウザ上で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;が体感できること」&lt;/b&gt;です。&lt;/p&gt;

&lt;p&gt;今までは&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の設定を試そうと思ったら、ネットで調べて自分の&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;に反映させて…という作業が必要でしたが、&lt;br&gt;
ブラウザ上で設定を即体感するという新しい体験を提供するために力を注いできました。&lt;br&gt;
その実現方法については、後述しています。&lt;/p&gt;

&lt;h2&gt;1-4. 紹介動画&lt;/h2&gt;

&lt;p&gt;詳しくは、実際に試してもらうのが早いと思いますが、簡単な操作動画を用意してみました。&lt;br&gt;
モバイルからこのサービスはちょっと使えないので、モバイルで読んでいる方は動画でお楽しみください(笑)&lt;br&gt;
&lt;iframe width=&#34;480&#34; height=&#34;270&#34; src=&#34;https://www.youtube.com/embed/j20agcBcAec?feature=oembed&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;cite class=&#34;hatena-citation&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=j20agcBcAec&amp;amp;feature=youtu.be&#34;&gt;www.youtube.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h1&gt;2. &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryの技術について&lt;/h1&gt;

&lt;p&gt;ここから&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryの技術について一部ではありますがご紹介します。&lt;/p&gt;

&lt;h2&gt;2-1. ブラウザ上での&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を実現した技術&lt;/h2&gt;

&lt;p&gt;ブラウザ上で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を実現しようと思うと、ぱっと思いつくのは&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/JavaScript&#34;&gt;JavaScript&lt;/a&gt;で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;そのものを実装してしまおうというものかもしれません。&lt;br&gt;
ですが、JSで&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を実装することってどれくらい難しいでしょうか？&lt;br&gt;
少なくともぼくにはそんなことはできませんし、できたとして質の悪いものになってしまうと思います。&lt;/p&gt;

&lt;p&gt;そこで思いついたのが、一般的なターミナルソフトと同様にサーバ上で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/vim&#34;&gt;vim&lt;/a&gt;を起動し、&lt;br&gt;
そのターミナル情報をブラウザ上で表示するという方法です。&lt;br&gt;
この方法であれば自ら&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を実装せずとも&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を再現できます。イメージは下記のとおりです。&lt;br&gt;
&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20150718/20150718230605.png&#34; alt=&#34;f:id:mosuke5:20150718230605p:plain&#34; title=&#34;f:id:mosuke5:20150718230605p:plain&#34; class=&#34;hatena-fotolife&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;また、サービスとして上記を行うには、接続してきたユーザごとに&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を用意する必要があります。&lt;/p&gt;

&lt;p&gt;これらを実現するために利用したのが&lt;b&gt;Docker&lt;/b&gt;と&lt;b&gt;WebSocket&lt;/b&gt;です。&lt;br&gt;
dockerコンテナ上で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;を起動し、そのターミナル情報をWebSocketでブラウザに送信するようにしました。
&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20150720/20150720002840.png&#34; alt=&#34;f:id:mosuke5:20150720002840p:plain&#34; title=&#34;f:id:mosuke5:20150720002840p:plain&#34; class=&#34;hatena-fotolife&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;dockerはコンテナ型の仮想化なので起動がとてもはやく、&lt;br&gt;
httpのリクエストが来てからdockerコンテナを立ち上げても十分なほどのはやさをもっています。&lt;/p&gt;

&lt;h2&gt;2-2. 全体構成&lt;/h2&gt;

&lt;p&gt;システムの全体構成は以下のような感じです。&lt;br&gt;
※実際の役割は図のとおりですが、サーバはこんなに多くありません。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&#34;http://schema.org/Photograph&#34;&gt;&lt;img src=&#34;https://cdn-ak.f.st-hatena.com/images/fotolife/m/mosuke5/20150719/20150719124021.png&#34; alt=&#34;f:id:mosuke5:20150719124021p:plain&#34; title=&#34;f:id:mosuke5:20150719124021p:plain&#34; class=&#34;hatena-fotolife&#34; itemprop=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;2-3. 利用した技術とか&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&#34;&gt;ツール&lt;/a&gt;のまとめ&lt;/h2&gt;

&lt;p&gt;振り返りも兼ねて利用した技術・&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&#34;&gt;ツール&lt;/a&gt;を一覧にまとめておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Sinatra&#34;&gt;Sinatra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;thin&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;Websocket&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/memcached&#34;&gt;memcached&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;docker&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;centos7&lt;/li&gt;
&lt;li&gt;Ansible&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vagrant&#34;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gitlab&lt;/li&gt;
&lt;li&gt;mackerel&lt;/li&gt;
&lt;li&gt;slack&lt;/li&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/esa&#34;&gt;esa&lt;/a&gt;.io(ドキュメント管理)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;3. まとめ&lt;/h1&gt;

&lt;p&gt;このサービスで一番苦労したことはやっぱりブラウザ上での&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;の実現部分です。&lt;br&gt;
当初、このサービスを思いついた時、実現不可能だ…とあきらめました。&lt;br&gt;
というのもJS（アプリケーションサイド）で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;をどう実装しようかしか考えていなかったからです。&lt;/p&gt;

&lt;p&gt;ですが、ふとしたときに上記の別の方法（インフラサイド）での実現方法を思いつきました。&lt;/p&gt;

&lt;p&gt;このサービスを作るきっかけは、インフラ技術のインプット勉強だけでは飽きたらず、&lt;br&gt;
サービスを開発・運用していくなかでインフラ技術を磨いていきたいというものでしたが、&lt;br&gt;
インプットの勉強があってこそインフラサイドからの実現方法を見つけられたようにも思いました。&lt;/p&gt;

&lt;p&gt;今後、運用を通してさらなるパワーアップができたらいいなと思います。&lt;/p&gt;

&lt;h1&gt;4. 最後に&lt;/h1&gt;

&lt;p&gt;最後になりますが、
完全な趣味で作ってしまったサービスで、今後どのように展開していこうか何も考えていません。&lt;br&gt;
まずは、このように公開し皆様に利用して頂いて、フィードバックなど頂いてから考えようと思っています。&lt;/p&gt;

&lt;p&gt;サービスに関するご意見等あれば、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Twitter&#34;&gt;Twitter&lt;/a&gt;やメールで書いてくれると大変嬉しいです。&lt;/p&gt;

&lt;p&gt;お問い合せはこちら:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Twitter&#34;&gt;Twitter&lt;/a&gt;: &lt;a href=&#34;https://twitter.com/mosuke5&#34;&gt;もーすけ (@mosuke5) | Twitter&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/mogulla3&#34;&gt;もぐらマン (@mogulla3) | Twitter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;e-mail: ilab.vimfactory+info@&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/gmail&#34;&gt;gmail&lt;/a&gt;.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では、みなさんも&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;ライフを楽しみましょう！&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vim&#34;&gt;Vim&lt;/a&gt;::Factoryはこちら。&lt;br&gt;
&lt;a href=&#34;http://vimfactory.com/&#34;&gt;http://vimfactory.com/&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>