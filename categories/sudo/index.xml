<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sudo on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/sudo/</link>
    <description>Recent content in Sudo on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 05 Apr 2015 21:25:00 +0900</lastBuildDate>
    <atom:link href="https://blog.mosuke.tech/categories/sudo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SSHエージェントフォワード後に他のユーザでgit cloneする(鍵を使う)ことに関する考察</title>
      <link>https://blog.mosuke.tech/entry/2015/04/05/212518/</link>
      <pubDate>Sun, 05 Apr 2015 21:25:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/04/05/212518/</guid>
      <description>&lt;p&gt;&lt;body&gt;
&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;のエージェントフォワードした後に、接続したユーザとは別のユーザでgit cloneしたいことがあった。&lt;br&gt;
それについて調べていく中で学習したことや検討したことについてまとめた。&lt;/p&gt;&lt;/p&gt;

&lt;h1&gt;0. 前提&lt;/h1&gt;

&lt;p&gt;ローカルのPC(&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Mac&#34;&gt;Mac&lt;/a&gt;)上で、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Vagrant&#34;&gt;Vagrant&lt;/a&gt;を使用してCentOS7の仮想サーバ(testsv)を立ち上げている。&lt;/p&gt;

&lt;p&gt;&amp;lt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9&#34;&gt;IPアドレス&lt;/a&gt;&amp;gt;&lt;br&gt;
ローカルPC：192.168.33.1&lt;br&gt;
仮想サーバ：192.168.33.100&lt;/p&gt;

&lt;p&gt;本記事上での「git cloneする」とは、「プライベートのGit&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%EC%A5%DD%A5%B8%A5%C8%A5%EA&#34;&gt;レポジトリ&lt;/a&gt;から&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;を利用してクローンする」ということを指す。&lt;/p&gt;

&lt;h1&gt;1. &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;のエージェントフォワードを利用したい理由&lt;/h1&gt;

&lt;p&gt;まず、そもそもなぜ&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;のエージェントフォワードをする必要があったのか。&lt;br&gt;
最近では多くの方がご存知かつ利用していることだと思うが、仮想のサーバ上でgitを利用するときによく利用する。&lt;br&gt;
(もちろんそれだけの用途ではありません)&lt;/p&gt;

&lt;p&gt;仮想サーバを作るたびに&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;の鍵を生成して、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/Github&#34;&gt;Github&lt;/a&gt;等に登録するのが手間なので、&lt;br&gt;
ローカルのPCの鍵を他のサーバへ引き継ぐことでgit clone等を可能にするのだ。&lt;/p&gt;

&lt;h1&gt;2. &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;エージェントフォワード利用時の挙動&lt;/h1&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;のエージェントフォワードで利用される認証情報は、接続先サーバの/tmp以下に保存されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[myuser@localpc ~]$ ssh -A vagrant@192.168.33.100
Last login: Sat Apr  4 xx:xx:xx 2015 from 192.168.33.1
[vagrant@testsv ~]$
[vagrant@testsv ~]$ ls -l /tmp | grep ssh
drwx------. 2 vagrant    vagrant    23  4月  4 11:35 ssh-skQVHsUCHU 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
また、接続ユーザには&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;_AUTH_SOCKという&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4&#34;&gt;環境変数&lt;/a&gt;ができ、どの認証情報を利用するか記述がされます。&lt;br&gt;
実際に確認してみる。&lt;br&gt;
確認方法は、envコマンドで&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4&#34;&gt;環境変数&lt;/a&gt;一覧を表示し、そのなかで&#34;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/ssh&#34;&gt;ssh&lt;/a&gt;&#34;を含むものを&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/grep&#34;&gt;grep&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@testsv ~]$ env | grep -i ssh
SSH_AUTH_SOCK=/tmp/ssh-skQVHsUCHU/agent.9034
SSH_CLIENT=&#39;192.168.33.1 58017 22&#39;
SSH_CONNECTION=&#39;192.168.33.1 58017 192.168.33.100 22&#39;
SSH_TTY=/dev/pts/0 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
ちなみにエージェントフォワードは、認証エージェントに登録されている&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%C8%EB%CC%A9%B8%B0&#34;&gt;秘密鍵&lt;/a&gt;を&lt;br&gt;
ログイン先のサーバから利用できるようにする機能であり、接続元自体が変わるわけではない。&lt;br&gt;
試しにエージェントフォワードで接続したサーバ先から、更に&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/ssh&#34;&gt;ssh&lt;/a&gt;をして、その接続状況をみてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[myuser@localpc ~]$ ssh -A vagrant@192.168.33.100
Last login: Sat Apr  4 xx:xx:xx 2015 from 192.168.33.1
[vagrant@testsv ~]$ ssh -A vagrant@192.168.33.100
Last login: Sat Apr  4 xx:xx:xx 2015 from 192.168.33.1
[vagrant@testsv ~]$
[vagrant@testsv ~]$ w
 11:50:17 up  1:55,  2 users,  load average: 0.00, 0.01, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
vagrant  pts/0    192.168.33.1     11:35    1.00s  0.04s  0.01s ssh -A vagrant@192.168.33.100
vagrant  pts/1    192.168.33.100   11:50    1.00s  0.01s  0.00s w 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;wコマンドの結果の3行目のFROMをみるとわかるが、接続元が変わるわけではない。&lt;/p&gt;

&lt;h1&gt;3. &lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;エージェントフォワードで接続後にrootユーザでgit cloneする&lt;/h1&gt;

&lt;p&gt;例えば、rootでしかアクセスできないディレクトリにgit cloneしたいと思い、&lt;br&gt;
以下のようにsudoをつけてgit cloneしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@testsv ~]$ sudo git clone git@xxxxx.xxx:yyyy/zzzzzz.git /root/hoge
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sudoをつけてgit cloneしようとすると、エージェントフォワードしたのにアクセス権がありませんと言われてしまった。&lt;br&gt;
なぜエージェントフォワードしたのにgit cloneできないのだろうか？&lt;/p&gt;

&lt;p&gt;一般的な設定ではsudo実行すると、ユーザの&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4&#34;&gt;環境変数&lt;/a&gt;はrootユーザへ引き継がれず、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;_AUTH_SOCKがないことがわかる。&lt;br&gt;
sudo後に&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4&#34;&gt;環境変数&lt;/a&gt;がどうなっているか確認してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@testsv ~]$ sudo env | grep -i ssh
　(なにも表示されない) 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
sudo実行しても、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;_AUTH_SOCKを引き継ぎたい！&lt;br&gt;
実はsudoで&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4&#34;&gt;環境変数&lt;/a&gt;を引き継ぐ方法がある。-Eのオプションを付けると&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4&#34;&gt;環境変数&lt;/a&gt;を引き継ぐことが可能だ。&lt;br&gt;
以下のように&lt;code&gt;sudo -E&lt;/code&gt;とすると...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@testsv ~]$ sudo -E env | grep -i ssh
SSH_CLIENT=192.168.33.100 60051 22
SSH_TTY=/dev/pts/1
SSH_AUTH_SOCK=/tmp/ssh-qhGLsXBURp/agent.9113
SSH_CONNECTION=192.168.33.100 60051 192.168.33.100 22 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;code&gt;sudo -E&lt;/code&gt;で&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4&#34;&gt;環境変数&lt;/a&gt;が引き継げ、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;_AUTH_SOCKが引き継げるので、-Eをつけてsudo git cloneをトライする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@testsv ~]$ sudo -E git clone git@xxxxx.xxx:yyyy/zzzzzz.git /root/hoge
Cloning into &#39;zzzzzz&#39;...
remote: Counting objects: 27, done.
remote: Compressing objects: 100% (26/26), done.
remote: Total 27 (delta 13), reused 0 (delta 0)
Receiving objects: 100% (27/27), done.
Resolving deltas: 100% (13/13), done.
Checking connectivity... done. 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;予想通り成功しました！&lt;/p&gt;

&lt;h3&gt;(余談) suもsudoと同じ考え方ができる&lt;/h3&gt;

&lt;p&gt;sudoだけではなくsuでのユーザ切り替えについても同じことが言える。&lt;br&gt;
rootユーザへ切り替えるとき、よく&lt;code&gt;su -&lt;/code&gt;とハイフンをつけると思う。&lt;br&gt;
ハイフンをつけると、ログインシェルを使用してユーザを切り替えるので、&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4&#34;&gt;環境変数&lt;/a&gt;の引き継ぎは行われない。&lt;/p&gt;

&lt;h1&gt;4. rootユーザでない他のユーザでgit cloneする&lt;/h1&gt;

&lt;p&gt;続いて、rootユーザではない別の一般ユーザでのgit cloneについて考える。&lt;br&gt;
rootユーザの時と同じ要領で、sudoコマンドを利用しotheruserという別のユーザでgit cloneをしてみる。&lt;/p&gt;

&lt;p&gt;まずは、sudoコマンドでは-uでユーザの指定ができるので、otheruserに切り替えた際の&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4&#34;&gt;環境変数&lt;/a&gt;をみてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@testsv ~]$ sudo -E -u otheruser env | grep -i ssh
SSH_CLIENT=192.168.33.100 60051 22
SSH_TTY=/dev/pts/1
SSH_AUTH_SOCK=/tmp/ssh-qhGLsXBURp/agent.9113
SSH_CONNECTION=192.168.33.100 60051 192.168.33.100 22 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
rootの時と同様で予想通りな感じ。
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;_AUTH_SOCKも引き継げているし、git clone可能だと思い以下を実行すると。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo -E -u otheruser git clone git@xxxxx.xxx:yyyy/zzzzzz.git /home/otheruser
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists. 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
rootユーザの時とは異なってgit cloneは不可…&lt;/p&gt;

&lt;p&gt;でも理由はいたって簡単。&lt;br&gt;
/tmp以下に保存されている認証情報は、所有者は接続したユーザで&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/%A5%D1%A1%BC%A5%DF%A5%C3%A5%B7%A5%E7%A5%F3&#34;&gt;パーミッション&lt;/a&gt;は600なのだ。&lt;br&gt;
つまり、otheruserではこの認証情報は読みこめないのである。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@testsv ~]$ ls -l /tmp | grep ssh
drwx------. 2 vagrant    vagrant    23  4月  4 11:35 ssh-skQVHsUCHU 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重要な情報なので、アクセス権は妥当ですよね。&lt;br&gt;
試しにアクセス権を変えてみるとgit cloneは可能だ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@testsv ~]$ chmod -R 777 /tmp/ssh-skQVHsUCHU
[vagrant@testsv ~]$ sudo -E -u otheruser git clone git@xxxxx.xxx:yyyy/zzzzzz.git /home/otheruser
Cloning into &#39;zzzzzz&#39;...
remote: Counting objects: 27, done.
remote: Compressing objects: 100% (26/26), done.
remote: Total 27 (delta 13), reused 0 (delta 0)
Receiving objects: 100% (27/27), done.
Resolving deltas: 100% (13/13), done.
Checking connectivity... done. 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;5. まとめ&lt;/h1&gt;

&lt;p&gt;&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;のエージェントフォワードした際の動きと、重要な観点については抑えられた。&lt;br&gt;
&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;エージェントフォワードの仕組みを見ていくことで、&lt;br&gt;
うかつにエージェントフォワードは利用してはいけない理由も見えてきた。&lt;/p&gt;

&lt;p&gt;&lt;p&gt;また、本題の「&lt;a class=&#34;keyword&#34; href=&#34;http://d.hatena.ne.jp/keyword/SSH&#34;&gt;SSH&lt;/a&gt;エージェントフォワード後に、接続したユーザとは別のユーザでgit cloneしたい」だが、
そもそもそういうことをすることはNGということらしい。&lt;br&gt;
別のもっと賢い方法を考えろってことのようでした。&lt;/p&gt;
&lt;/body&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>